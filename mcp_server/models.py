# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:35:17+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, RootModel, constr


class DataSetPublicationDate(RootModel[datetime]):
    root: datetime


class DataSetRequestId(RootModel[str]):
    root: str


class DataSetType(Enum):
    customer_subscriber_hourly_monthly_subscriptions = (
        'customer_subscriber_hourly_monthly_subscriptions'
    )
    customer_subscriber_annual_subscriptions = (
        'customer_subscriber_annual_subscriptions'
    )
    daily_business_usage_by_instance_type = 'daily_business_usage_by_instance_type'
    daily_business_fees = 'daily_business_fees'
    daily_business_free_trial_conversions = 'daily_business_free_trial_conversions'
    daily_business_new_instances = 'daily_business_new_instances'
    daily_business_new_product_subscribers = 'daily_business_new_product_subscribers'
    daily_business_canceled_product_subscribers = (
        'daily_business_canceled_product_subscribers'
    )
    monthly_revenue_billing_and_revenue_data = (
        'monthly_revenue_billing_and_revenue_data'
    )
    monthly_revenue_annual_subscriptions = 'monthly_revenue_annual_subscriptions'
    monthly_revenue_field_demonstration_usage = (
        'monthly_revenue_field_demonstration_usage'
    )
    monthly_revenue_flexible_payment_schedule = (
        'monthly_revenue_flexible_payment_schedule'
    )
    disbursed_amount_by_product = 'disbursed_amount_by_product'
    disbursed_amount_by_product_with_uncollected_funds = (
        'disbursed_amount_by_product_with_uncollected_funds'
    )
    disbursed_amount_by_instance_hours = 'disbursed_amount_by_instance_hours'
    disbursed_amount_by_customer_geo = 'disbursed_amount_by_customer_geo'
    disbursed_amount_by_age_of_uncollected_funds = (
        'disbursed_amount_by_age_of_uncollected_funds'
    )
    disbursed_amount_by_age_of_disbursed_funds = (
        'disbursed_amount_by_age_of_disbursed_funds'
    )
    disbursed_amount_by_age_of_past_due_funds = (
        'disbursed_amount_by_age_of_past_due_funds'
    )
    disbursed_amount_by_uncollected_funds_breakdown = (
        'disbursed_amount_by_uncollected_funds_breakdown'
    )
    customer_profile_by_industry = 'customer_profile_by_industry'
    customer_profile_by_revenue = 'customer_profile_by_revenue'
    customer_profile_by_geography = 'customer_profile_by_geography'
    sales_compensation_billed_revenue = 'sales_compensation_billed_revenue'
    us_sales_and_use_tax_records = 'us_sales_and_use_tax_records'


class DestinationS3BucketName(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class DestinationS3Prefix(RootModel[str]):
    root: str


class FromDate(RootModel[datetime]):
    root: datetime


class GenerateDataSetResult(BaseModel):
    dataSetRequestId: Optional[DataSetRequestId] = None


class MarketplaceCommerceAnalyticsException(RootModel[Any]):
    root: Any


class OptionalKey(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class OptionalValue(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class RoleNameArn(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class SnsTopicArn(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class StartSupportDataExportResult(BaseModel):
    dataSetRequestId: Optional[DataSetRequestId] = None


class SupportDataSetType(Enum):
    customer_support_contacts_data = 'customer_support_contacts_data'
    test_customer_support_contacts_data = 'test_customer_support_contacts_data'


class XAmzTarget(Enum):
    MarketplaceCommerceAnalytics20150701_GenerateDataSet = (
        'MarketplaceCommerceAnalytics20150701.GenerateDataSet'
    )


class XAmzTarget1(Enum):
    MarketplaceCommerceAnalytics20150701_StartSupportDataExport = (
        'MarketplaceCommerceAnalytics20150701.StartSupportDataExport'
    )


class CustomerDefinedValues(RootModel[Optional[Dict[str, OptionalValue]]]):
    root: Optional[Dict[str, OptionalValue]] = None


class GenerateDataSetRequest(BaseModel):
    customerDefinedValues: Optional[CustomerDefinedValues] = None
    dataSetPublicationDate: DataSetPublicationDate
    dataSetType: DataSetType
    destinationS3BucketName: DestinationS3BucketName
    destinationS3Prefix: Optional[DestinationS3Prefix] = None
    roleNameArn: RoleNameArn
    snsTopicArn: SnsTopicArn


class StartSupportDataExportRequest(BaseModel):
    customerDefinedValues: Optional[CustomerDefinedValues] = None
    dataSetType: SupportDataSetType
    destinationS3BucketName: DestinationS3BucketName
    destinationS3Prefix: Optional[DestinationS3Prefix] = None
    fromDate: FromDate
    roleNameArn: RoleNameArn
    snsTopicArn: SnsTopicArn
